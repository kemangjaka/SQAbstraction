from modules.transformer import rotate_module, translate_module
import matplotlib.pyplot as plt
import math
import torch

colormap = torch.Tensor([[0.000000, 0.000000, 0.515625], [0.000000, 0.000000, 0.531250], [0.000000, 0.000000, 0.546875],
                         [0.000000, 0.000000, 0.562500], [0.000000, 0.000000, 0.578125], [0.000000, 0.000000, 0.593750],
                         [0.000000, 0.000000, 0.609375], [0.000000, 0.000000, 0.625000], [0.000000, 0.000000, 0.640625],
                         [0.000000, 0.000000, 0.656250], [0.000000, 0.000000, 0.671875], [0.000000, 0.000000, 0.687500],
                         [0.000000, 0.000000, 0.703125], [0.000000, 0.000000, 0.718750], [0.000000, 0.000000, 0.734375],
                         [0.000000, 0.000000, 0.750000], [0.000000, 0.000000, 0.765625], [0.000000, 0.000000, 0.781250],
                         [0.000000, 0.000000, 0.796875], [0.000000, 0.000000, 0.812500], [0.000000, 0.000000, 0.828125],
                         [0.000000, 0.000000, 0.843750], [0.000000, 0.000000, 0.859375], [0.000000, 0.000000, 0.875000],
                         [0.000000, 0.000000, 0.890625], [0.000000, 0.000000, 0.906250], [0.000000, 0.000000, 0.921875],
                         [0.000000, 0.000000, 0.937500], [0.000000, 0.000000, 0.953125], [0.000000, 0.000000, 0.968750],
                         [0.000000, 0.000000, 0.984375], [0.000000, 0.000000, 1.000000], [0.000000, 0.015625, 1.000000],
                         [0.000000, 0.031250, 1.000000], [0.000000, 0.046875, 1.000000], [0.000000, 0.062500, 1.000000],
                         [0.000000, 0.078125, 1.000000], [0.000000, 0.093750, 1.000000], [0.000000, 0.109375, 1.000000],
                         [0.000000, 0.125000, 1.000000], [0.000000, 0.140625, 1.000000], [0.000000, 0.156250, 1.000000],
                         [0.000000, 0.171875, 1.000000], [0.000000, 0.187500, 1.000000], [0.000000, 0.203125, 1.000000],
                         [0.000000, 0.218750, 1.000000], [0.000000, 0.234375, 1.000000], [0.000000, 0.250000, 1.000000],
                         [0.000000, 0.265625, 1.000000], [0.000000, 0.281250, 1.000000], [0.000000, 0.296875, 1.000000],
                         [0.000000, 0.312500, 1.000000], [0.000000, 0.328125, 1.000000], [0.000000, 0.343750, 1.000000],
                         [0.000000, 0.359375, 1.000000], [0.000000, 0.375000, 1.000000], [0.000000, 0.390625, 1.000000],
                         [0.000000, 0.406250, 1.000000], [0.000000, 0.421875, 1.000000], [0.000000, 0.437500, 1.000000],
                         [0.000000, 0.453125, 1.000000], [0.000000, 0.468750, 1.000000], [0.000000, 0.484375, 1.000000],
                         [0.000000, 0.500000, 1.000000], [0.000000, 0.515625, 1.000000], [0.000000, 0.531250, 1.000000],
                         [0.000000, 0.546875, 1.000000], [0.000000, 0.562500, 1.000000], [0.000000, 0.578125, 1.000000],
                         [0.000000, 0.593750, 1.000000], [0.000000, 0.609375, 1.000000], [0.000000, 0.625000, 1.000000],
                         [0.000000, 0.640625, 1.000000], [0.000000, 0.656250, 1.000000], [0.000000, 0.671875, 1.000000],
                         [0.000000, 0.687500, 1.000000], [0.000000, 0.703125, 1.000000], [0.000000, 0.718750, 1.000000],
                         [0.000000, 0.734375, 1.000000], [0.000000, 0.750000, 1.000000], [0.000000, 0.765625, 1.000000],
                         [0.000000, 0.781250, 1.000000], [0.000000, 0.796875, 1.000000], [0.000000, 0.812500, 1.000000],
                         [0.000000, 0.828125, 1.000000], [0.000000, 0.843750, 1.000000], [0.000000, 0.859375, 1.000000],
                         [0.000000, 0.875000, 1.000000], [0.000000, 0.890625, 1.000000], [0.000000, 0.906250, 1.000000],
                         [0.000000, 0.921875, 1.000000], [0.000000, 0.937500, 1.000000], [0.000000, 0.953125, 1.000000],
                         [0.000000, 0.968750, 1.000000], [0.000000, 0.984375, 1.000000], [0.000000, 1.000000, 1.000000],
                         [0.015625, 1.000000, 0.984375], [0.031250, 1.000000, 0.968750], [0.046875, 1.000000, 0.953125],
                         [0.062500, 1.000000, 0.937500], [0.078125, 1.000000, 0.921875], [0.093750, 1.000000, 0.906250],
                         [0.109375, 1.000000, 0.890625], [0.125000, 1.000000, 0.875000], [0.140625, 1.000000, 0.859375],
                         [0.156250, 1.000000, 0.843750], [0.171875, 1.000000, 0.828125], [0.187500, 1.000000, 0.812500],
                         [0.203125, 1.000000, 0.796875], [0.218750, 1.000000, 0.781250], [0.234375, 1.000000, 0.765625],
                         [0.250000, 1.000000, 0.750000], [0.265625, 1.000000, 0.734375], [0.281250, 1.000000, 0.718750],
                         [0.296875, 1.000000, 0.703125], [0.312500, 1.000000, 0.687500], [0.328125, 1.000000, 0.671875],
                         [0.343750, 1.000000, 0.656250], [0.359375, 1.000000, 0.640625], [0.375000, 1.000000, 0.625000],
                         [0.390625, 1.000000, 0.609375], [0.406250, 1.000000, 0.593750], [0.421875, 1.000000, 0.578125],
                         [0.437500, 1.000000, 0.562500], [0.453125, 1.000000, 0.546875], [0.468750, 1.000000, 0.531250],
                         [0.484375, 1.000000, 0.515625], [0.500000, 1.000000, 0.500000], [0.515625, 1.000000, 0.484375],
                         [0.531250, 1.000000, 0.468750], [0.546875, 1.000000, 0.453125], [0.562500, 1.000000, 0.437500],
                         [0.578125, 1.000000, 0.421875], [0.593750, 1.000000, 0.406250], [0.609375, 1.000000, 0.390625],
                         [0.625000, 1.000000, 0.375000], [0.640625, 1.000000, 0.359375], [0.656250, 1.000000, 0.343750],
                         [0.671875, 1.000000, 0.328125], [0.687500, 1.000000, 0.312500], [0.703125, 1.000000, 0.296875],
                         [0.718750, 1.000000, 0.281250], [0.734375, 1.000000, 0.265625], [0.750000, 1.000000, 0.250000],
                         [0.765625, 1.000000, 0.234375], [0.781250, 1.000000, 0.218750], [0.796875, 1.000000, 0.203125],
                         [0.812500, 1.000000, 0.187500], [0.828125, 1.000000, 0.171875], [0.843750, 1.000000, 0.156250],
                         [0.859375, 1.000000, 0.140625], [0.875000, 1.000000, 0.125000], [0.890625, 1.000000, 0.109375],
                         [0.906250, 1.000000, 0.093750], [0.921875, 1.000000, 0.078125], [0.937500, 1.000000, 0.062500],
                         [0.953125, 1.000000, 0.046875], [0.968750, 1.000000, 0.031250], [0.984375, 1.000000, 0.015625],
                         [1.000000, 1.000000, 0.000000], [1.000000, 0.984375, 0.000000], [1.000000, 0.968750, 0.000000],
                         [1.000000, 0.953125, 0.000000], [1.000000, 0.937500, 0.000000], [1.000000, 0.921875, 0.000000],
                         [1.000000, 0.906250, 0.000000], [1.000000, 0.890625, 0.000000], [1.000000, 0.875000, 0.000000],
                         [1.000000, 0.859375, 0.000000], [1.000000, 0.843750, 0.000000], [1.000000, 0.828125, 0.000000],
                         [1.000000, 0.812500, 0.000000], [1.000000, 0.796875, 0.000000], [1.000000, 0.781250, 0.000000],
                         [1.000000, 0.765625, 0.000000], [1.000000, 0.750000, 0.000000], [1.000000, 0.734375, 0.000000],
                         [1.000000, 0.718750, 0.000000], [1.000000, 0.703125, 0.000000], [1.000000, 0.687500, 0.000000],
                         [1.000000, 0.671875, 0.000000], [1.000000, 0.656250, 0.000000], [1.000000, 0.640625, 0.000000],
                         [1.000000, 0.625000, 0.000000], [1.000000, 0.609375, 0.000000], [1.000000, 0.593750, 0.000000],
                         [1.000000, 0.578125, 0.000000], [1.000000, 0.562500, 0.000000], [1.000000, 0.546875, 0.000000],
                         [1.000000, 0.531250, 0.000000], [1.000000, 0.515625, 0.000000], [1.000000, 0.500000, 0.000000],
                         [1.000000, 0.484375, 0.000000], [1.000000, 0.468750, 0.000000], [1.000000, 0.453125, 0.000000],
                         [1.000000, 0.437500, 0.000000], [1.000000, 0.421875, 0.000000], [1.000000, 0.406250, 0.000000],
                         [1.000000, 0.390625, 0.000000], [1.000000, 0.375000, 0.000000], [1.000000, 0.359375, 0.000000],
                         [1.000000, 0.343750, 0.000000], [1.000000, 0.328125, 0.000000], [1.000000, 0.312500, 0.000000],
                         [1.000000, 0.296875, 0.000000], [1.000000, 0.281250, 0.000000], [1.000000, 0.265625, 0.000000],
                         [1.000000, 0.250000, 0.000000], [1.000000, 0.234375, 0.000000], [1.000000, 0.218750, 0.000000],
                         [1.000000, 0.203125, 0.000000], [1.000000, 0.187500, 0.000000], [1.000000, 0.171875, 0.000000],
                         [1.000000, 0.156250, 0.000000], [1.000000, 0.140625, 0.000000], [1.000000, 0.125000, 0.000000],
                         [1.000000, 0.109375, 0.000000], [1.000000, 0.093750, 0.000000], [1.000000, 0.078125, 0.000000],
                         [1.000000, 0.062500, 0.000000], [1.000000, 0.046875, 0.000000], [1.000000, 0.031250, 0.000000],
                         [1.000000, 0.015625, 0.000000], [1.000000, 0.000000, 0.000000], [0.984375, 0.000000, 0.000000],
                         [0.968750, 0.000000, 0.000000], [0.953125, 0.000000, 0.000000], [0.937500, 0.000000, 0.000000],
                         [0.921875, 0.000000, 0.000000], [0.906250, 0.000000, 0.000000], [0.890625, 0.000000, 0.000000],
                         [0.875000, 0.000000, 0.000000], [0.859375, 0.000000, 0.000000], [0.843750, 0.000000, 0.000000],
                         [0.828125, 0.000000, 0.000000], [0.812500, 0.000000, 0.000000], [0.796875, 0.000000, 0.000000],
                         [0.781250, 0.000000, 0.000000], [0.765625, 0.000000, 0.000000], [0.750000, 0.000000, 0.000000],
                         [0.734375, 0.000000, 0.000000], [0.718750, 0.000000, 0.000000], [0.703125, 0.000000, 0.000000],
                         [0.687500, 0.000000, 0.000000], [0.671875, 0.000000, 0.000000], [0.656250, 0.000000, 0.000000],
                         [0.640625, 0.000000, 0.000000], [0.625000, 0.000000, 0.000000], [0.609375, 0.000000, 0.000000],
                         [0.593750, 0.000000, 0.000000], [0.578125, 0.000000, 0.000000], [0.562500, 0.000000, 0.000000],
                         [0.546875, 0.000000, 0.000000], [0.531250, 0.000000, 0.000000], [0.515625, 0.000000, 0.000000],
                         [0.500000, 0.000000, 0.000000]])

cubeV = torch.Tensor(
  [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0], [1.0, 0.0, 0.0], [1.0, 0.0, 1.0],
   [1.0, 1.0, 0.0], [1.0, 1.0, 1.0]])
cubeV = 2 * cubeV - 1
cubeF = torch.Tensor(
  [[1, 7, 5], [1, 3, 7], [1, 4, 3], [1, 2, 4], [3, 8, 7], [3, 4, 8], [5, 7, 8], [5, 8, 6], [1, 5, 6], [1, 6, 2],
   [2, 6, 8], [2, 8, 4]])

import pdb
def cuboidMesh(shape):
  # Shape is a Float Tensor
  verts = cubeV.clone()
  for d in range(0, 3):
    verts[:, d] = verts[:, d] * shape[d]
  return verts, cubeF.clone()

def sqMesh(shape):
  import numpy as np
  e1 = shape[0]
  e2 = shape[1]
  a1 = shape[2]
  a2 = shape[3]
  a3 = shape[4]
  phi_sample = 100
  theta_sample = 100
  theta_sample_rate = 2 * math.pi / float(theta_sample)
  phi_sample_rate = math.pi / float(phi_sample)
  points = []
  point_num = 0
  for phi in xrange(math.pi / -2.0, math.pi / 2.0, phi_sample_rate):
    for theta in xrange(-1.0 * math.pi, math.pi, theta_sample_rate):
      x = a1 * np.sign(math.cos(phi)) * math.pow(math.fabs(math.cos(phi)), e1) * np.sign(math.cos(theta)) * math.pow(math.abs(math.cos(theta)), e2)
      y = a2 * np.sign(math.cos(phi)) * math.pow(math.fabs(math.cos(phi)), e1) * np.sign(math.sin(theta)) * math.pow(math.abs(math.sin(theta)), e2)
      z = a3 * np.sign(math.sin(phi)) * math.pow(math.fabs(math.sin(phi)), e1)
      points.append([x, y, z])
      point_num+=1
  verts = torch.Tensor(points)

  edges = []

  for v in range(1, phi_sample):
    for u in range(1, theta_sample):
      edges.append([v * phi_sample + u, v * phi_sample + u - 1, (v - 1) * phi_sample + u])
      edges.append([(v - 1) * phi_sample + u, v * phi_sample + u - 1, (v - 1) * phi_sample + u - 1])
    edges.append([v * phi_sample + 0, v * phi_sample + phi_sample - 1, (v - 1) * phi_sample + 0])
    edges.append([(v - 1) * phi_sample + 0, v * phi_sample + phi_sample - 1, (v - 1) * phi_sample + phi_sample - 1])

  for i in range(1, phi_sample):
    edges.append([point_num - 1, i - 1, i])
  edges.append([point_num - 1, theta_sample, 0])

  edges = torch.Tensor(edges)

  return verts, edges


def shapeMesh(shape):
  return sqMesh(shape)
  #return cuboidMesh(shape)


def shapeVolume(shape):
  return 8 * shape[0] * shape[1] * shape[2]


def unpack(part):
  return (part[0:5], part[5:8], part[8:12])


def plot_voxels(voxels, block=True, color='r'):
  voxels2 = voxels.__ge__(0.5)
  cube_len = voxels.shape[0]
  x, y, z = voxels2.nonzero()
  fig = plt.figure()
  ax = fig.add_subplot(111, projection='3d')
  azm = -97
  ele = 112
  ax.view_init(elev=ele, azim=azm)
  ax.set_xlim([0, cube_len])
  ax.set_ylim([0, cube_len])
  ax.set_zlim([0, cube_len])
  ax.scatter(x, y, z, zdir='z', c=color, s=20, marker='s')
  plt.show(block=block)


def partVerticesAndFaces(predParts):
  part_vertices = []
  nParts = len(predParts)
  for p in range(nParts):
    shape, translation, quat = unpack(predParts[p])
    verts, faces = shapeMesh(shape)
    nVerts = verts.size(0)
    verts = verts.view(1, nVerts, 3)
    quat = quat.clone()
    quat[0] = -quat[0]
    quat = quat.view(1, 1, -1)
    trans = translation.view(1, 1, -1)
    verts = rotate_module(verts, quat)
    verts = translate_module(verts, trans)
    verts = verts.squeeze(0)
    part_vertices.append(verts)
  return part_vertices, faces

import pdb

def saveParts(predParts, outputFile, partIndsSpecific=[]):
  # outputFile is obj
  mtlfile = outputFile.replace("obj", "mtl")
  foutMtl = open(mtlfile, 'w')
  fout = open(outputFile, 'w')
  mtlfile  = mtlfile.split("/")
  mtlfile = mtlfile[-1]
  partCmaps = []
  nParts = len(predParts)

  for p in range(nParts):
    partCmaps.append(colormap[p * (256 // nParts)])
    foutMtl.write('newmtl m{}\nKd {} {} {}\nKa 0 0 0\n'.format(p, partCmaps[p][0], partCmaps[p][1], partCmaps[p][2]))
  foutMtl.close()


  fout.write('mtllib {}\n'.format(mtlfile))

  if len(partIndsSpecific) == 0:
    for i in range(len(predParts)):
      partIndsSpecific.append(i)
  vertsOffset = 0

  for i in partIndsSpecific:
    p = partIndsSpecific[i]
    if predParts[p][-1] > 0.5:
      verts, faces = partVerticesAndFaces([predParts[p]])
      verts = verts[0]
      faces = faces + vertsOffset

      fout.write('usemtl m{}\n'.format(p))
      for vx in range(verts.size(0)):
        fout.write('v {} {} {}\n'.format(verts[vx][0], verts[vx][1], verts[vx][2]))
      for fx in range(faces.size(0)):
        fout.write('f {} {} {}\n'.format(faces[fx][0], faces[fx][1], faces[fx][2]))
      vertsOffset = vertsOffset + verts.size(0)

  fout.close()



def savePredParts(predpart, outputfile):
  pred_b = []
  nParts = predpart.size(0)
  for px in range(nParts):
    pred_b.append(predpart[px, :].clone().data.cpu())

  saveParts(pred_b, '{}'.format(outputfile))